
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using System.Net;
using System.Diagnostics;
using System.Text.RegularExpressions;

namespace Starcounter.ErrorCodes.Generator {
class Program {
    private static readonly Regex MultipleWhitespace = new Regex(@"\s+");

    private static bool verbose = false;

    public static void Verbose(string s) {
        if (verbose) {
            Trace.TraceInformation(s);
            Console.Error.WriteLine("VERBOSE: {0}", s);
        }
    }
    public static void Verbose(string fmt, params object[] args) {
        if (verbose) {
            Trace.TraceInformation(fmt, args);
            Console.Error.WriteLine("VERBOSE: " + fmt, args);
        }
    }

    static void Main(string[] args) {
        Stream instream = null;
        TextWriter csfile = null;
        TextWriter mcfile = null;
        TextWriter exceptionAssistantContentFile = null;

        try {
            verbose = args.Any(str => str == "-v");
            CommandLine.ParseArgs(args, ref instream, ref csfile, ref mcfile, ref exceptionAssistantContentFile);
            bool anythingDone = false;
            
            IList<ErrorCode> allCodes = ErrorFileReader.ReadErrorCodes(instream).ErrorCodes;
            
            if (mcfile != null) {
                Verbose("Writing MC file...");
                anythingDone = true;
                WriteMcFile(allCodes, mcfile);
                mcfile.Flush();
                if (mcfile != Console.Out)
                {
                    mcfile.Dispose();
                }
                Verbose("MC file written.");
            }

            if (csfile != null) {
                Verbose("Writing C# file...");
                anythingDone = true;
                WriteCSharpFile(allCodes, csfile);
                csfile.Flush();
                if (csfile != Console.Out)
                {
                    csfile.Dispose();
                }
                Verbose("C# file written.");
            }
            
            if (exceptionAssistantContentFile != null) {
                Verbose("Writing Exception assistant content file...");
                anythingDone = true;
                WriteExceptionAssistantContentFile(allCodes, exceptionAssistantContentFile);
                Verbose("ExceptionAssistantContentFile file written.");
            }

            if (!anythingDone) {
                Verbose("No actions taken");
            } else {
                Verbose("All actions performed successfully");
            }
        } catch (Exception e) {
            Die("Exception occurred: " + e);
        }
    }

    private static void WriteMcFile(IEnumerable<ErrorCode> allCodes, TextWriter writer) {
        writer.WriteLine(";#pragma once");
        writer.WriteLine(";/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *");
        writer.WriteLine("; *");
        writer.WriteLine("; * THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.");
        writer.WriteLine("; *");
        writer.WriteLine("; */");
        writer.WriteLine("OutputBase=10");
        writer.WriteLine();

        foreach (ErrorCode ec in allCodes) {
            foreach (string remparam in ec.RemarkParagraphs) {
                writer.WriteLine(";// {0}", remparam);
            }
            writer.WriteLine("MessageId    = {0}", ec.CodeWithFacility);
            writer.WriteLine("SymbolicName = {0}", ec.ConstantName);
            writer.WriteLine("Language     = English");
            writer.WriteLine("{0} ({1}): {2}%0", ec.Name, String.Concat("SCERR", ec.CodeWithFacility), ec.Description);
            writer.WriteLine(".");
            writer.WriteLine();
        }
    }

    private static void WriteCSharpFile(IEnumerable<ErrorCode> allCodes, TextWriter writer) {
        const string Indent = "    ";
        const string Indent2 = Indent + Indent;
        const string Indent3 = Indent2 + Indent;

        // write head
        writer.WriteLine("/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *");
        writer.WriteLine(" *");
        writer.WriteLine(" * THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.");
        writer.WriteLine(" *");
        writer.WriteLine(" */");
        writer.WriteLine();
        writer.WriteLine("namespace Starcounter.ErrorCodes");
        writer.WriteLine("{");
        writer.WriteLine(Indent + "/// <summary>");
        writer.WriteLine(Indent + "/// Class Error");
        writer.WriteLine(Indent + "/// </summary>");
        writer.WriteLine(Indent + "public static class Error");
        writer.WriteLine(Indent + "{");

        // Write categories/facilities

        IList<Facility> facilitesWritten;
        
        facilitesWritten = new List<Facility>();
        writer.WriteLine(Indent2 + "public enum Category");
        writer.WriteLine(Indent2 + "{");

        foreach (ErrorCode ec in allCodes) {
            if (facilitesWritten.Contains(ec.Facility))
                continue;

            facilitesWritten.Add(ec.Facility);
            writer.WriteLine("{0}{1} = {2},", Indent3, ec.Facility.Name, ec.Facility.Code * 1000);
        }

        writer.WriteLine(Indent2 + "}");
        writer.WriteLine();

        // write error codes
        foreach (ErrorCode ec in allCodes) {
            writer.WriteLine(Indent2 + "/// <summary> ");
            writer.Write(Indent2 + "/// ");
            writer.Write(WebUtility.HtmlEncode(ec.Description));
            writer.WriteLine();
            writer.WriteLine(Indent2 + "/// </summary>");

            if (ec.RemarkParagraphs.Count == 1) {
                writer.WriteLine(Indent2 + "/// <remarks>");
                writer.Write(Indent2 + "/// ");
                writer.Write(WebUtility.HtmlEncode(ec.RemarkParagraphs[0]));
                writer.WriteLine();
                writer.WriteLine(Indent2 + "/// </remarks>");
            } else if (ec.RemarkParagraphs.Count > 1) {
                writer.WriteLine(Indent2 + "/// <remarks>");
                foreach (string remark in ec.RemarkParagraphs) {
                    writer.Write(Indent2 + "/// <para>");
                    writer.Write(WebUtility.HtmlEncode(remark));
                    writer.WriteLine(" </para>");
                }
                writer.WriteLine(Indent2 + "/// </remarks>");
            }
            writer.WriteLine(Indent2 + "public const uint {0} = {1};", ec.ConstantName, ec.CodeWithFacility);
        }
    
        writer.WriteLine(Indent + "}");
        writer.WriteLine("}");
    }

    #region Visual Studio Exception assistant content file writing methods

    static void WriteExceptionAssistantContentFile(IEnumerable<ErrorCode> errorCodes, TextWriter outputWriter)
    {
        IList<Facility> facilitesWritten;
        XmlWriterSettings settings;
        XmlWriter writer;

        facilitesWritten = new List<Facility>();
        settings = new XmlWriterSettings();
        settings.Indent = true;
        writer = XmlWriter.Create(outputWriter, settings);

        writer.WriteStartElement("AssistantContent", "urn:schemas-microsoft-com:xml-msdata:exception-assistant-content");
        writer.WriteAttributeString("Version", "1.0");

        writer.WriteStartElement("ContentInfo");
        writer.WriteElementString("ContentName", "Starcounter help content");
        writer.WriteElementString("ContentID", "urn:exception-content-microsoft-com:visual-studio-7-default-content");
        writer.WriteElementString("ContentFileVersion", "1.0");
        writer.WriteElementString("ContentAuthor", "Starcounter");
        writer.WriteElementString("ContentComment", "Starcounter-specific Exception Assistant Content for Visual Studio 10.0.");
        writer.WriteEndElement();

        // The first version included links to category summary pages,
        // one per error code category.
        //foreach (var errorCode in errorCodes)
        //{
        //    WriteErrorCodeContentAllExceptionsOnePerFacility(writer, facilitesWritten, errorCode);
        //}

        // The second version includes just a link to report the
        // exception (from a wiki page) and a link for general troubleshooting.
        WriteErrorCodeContentSimplestForm(writer);

        writer.WriteEndElement();

        writer.Flush();
        writer.Dispose();
    }

    static void WriteErrorCodeContentSimplestForm(XmlWriter writer)
    {
        string precondition;

        precondition = "Message~\"SCERR\"";

        writer.WriteStartElement("Exception");
        writer.WriteElementString("Type", "*");
        writer.WriteElementString("Precondition", precondition);

        writer.WriteStartElement("Tip");
        writer.WriteAttributeString("HelpID", "http://www.starcounter.com/wiki/ReportExceptionFromVSAssistant");
        writer.WriteElementString("Description", "Tell Starcounter about this exception.");
        writer.WriteEndElement();

        writer.WriteEndElement();

        writer.WriteStartElement("Exception");
        writer.WriteElementString("Type", "*");
        writer.WriteElementString("Precondition", precondition);

        writer.WriteStartElement("Tip");
        writer.WriteAttributeString("HelpID", "http://www.starcounter.com/wiki/TroubleshootingHelpFromVSAssistant");
        writer.WriteElementString("Description", "See Starcounter troubleshooting tips.");
        writer.WriteEndElement();

        writer.WriteEndElement();

        precondition = "InnerException.Message~\"SCERR\"";

        writer.WriteStartElement("Exception");
        writer.WriteElementString("Type", "*");
        writer.WriteElementString("Precondition", precondition);

        writer.WriteStartElement("Tip");
        writer.WriteAttributeString("HelpID", "http://www.starcounter.com/wiki/ReportExceptionFromVSAssistant");
        writer.WriteElementString("Description", "Tell Starcounter about this exception.");
        writer.WriteEndElement();

        writer.WriteEndElement();

        writer.WriteStartElement("Exception");
        writer.WriteElementString("Type", "*");
        writer.WriteElementString("Precondition", precondition);

        writer.WriteStartElement("Tip");
        writer.WriteAttributeString("HelpID", "http://www.starcounter.com/wiki/TroubleshootingHelpFromVSAssistant");
        writer.WriteElementString("Description", "See Starcounter troubleshooting tips.");
        writer.WriteEndElement();

        writer.WriteEndElement();
    }

    static void WriteErrorCodeContentAllExceptionsOnePerFacility(
        XmlWriter writer,
        IList<Facility> facilitesWritten,
        ErrorCode code)
    {
        string precondition;

        if (facilitesWritten.Contains(code.Facility))
            return;

        facilitesWritten.Add(code.Facility);

        if (code.Facility.Code == 0)
        {
            precondition = "Message~\"SCERR\"";

            writer.WriteStartElement("Exception");
            writer.WriteElementString("Type", "*");
            writer.WriteElementString("Precondition", precondition);

            writer.WriteStartElement("Tip");
            writer.WriteAttributeString("HelpID", "http://www.starcounter.com/forum/search.php?query=[Enter error code here, for example SCERR1234]");
            writer.WriteElementString("Description", "Search Starcounter forums for this error (for example \"SCERR1234\").");
            writer.WriteEndElement();

            writer.WriteEndElement();

            precondition = "InnerException.Message~\"SCERR\"";

            writer.WriteStartElement("Exception");
            writer.WriteElementString("Type", "*");
            writer.WriteElementString("Precondition", precondition);

            writer.WriteStartElement("Tip");
            writer.WriteAttributeString("HelpID", "http://www.starcounter.com/forum/search.php?query=[Enter error code here, for example SCERR1234]");
            writer.WriteElementString("Description", "Search Starcounter forums for this error (for example \"SCERR1234\").");
            writer.WriteEndElement();

            writer.WriteEndElement();
        }

        precondition = string.Format("Source=\"Starcounter({0})\"", code.Facility.Name);

        writer.WriteStartElement("Exception");
        writer.WriteElementString("Type", "*");
        writer.WriteElementString("Precondition", precondition);

        writer.WriteStartElement("Tip");
        writer.WriteAttributeString("HelpID", string.Format("http://www.starcounter.com/wiki/SCERR{0}", code.Facility.Name));
        writer.WriteElementString("Description", string.Format("Go to the Starcounter '{0}' category help page.", code.Facility.Name));
        writer.WriteEndElement();

        writer.WriteEndElement();

        precondition = string.Format("InnerException.Source=\"Starcounter({0})\"", code.Facility.Name);

        writer.WriteStartElement("Exception");
        writer.WriteElementString("Type", "*");
        writer.WriteElementString("Precondition", precondition);

        writer.WriteStartElement("Tip");
        writer.WriteAttributeString("HelpID", string.Format("http://www.starcounter.com/wiki/SCERR{0}", code.Facility.Name));
        writer.WriteElementString("Description", string.Format("Go to the Starcounter '{0}' category help page.", code.Facility.Name));
        writer.WriteEndElement();

        writer.WriteEndElement();
    }

    #endregion

    public static void Die(string msg)
    {
        Trace.TraceError(msg);
        Console.Error.WriteLine(msg);
        Environment.Exit(1);
    }
}
}
